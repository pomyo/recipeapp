{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Heading","react_default","a","createElement","className","DetailView","props","detail","name","toUpperCase","ingredients","map","ingredient","instructions","instruction","DirectoryView","src_SearchForm","handleChange","searchValue","selectRecipes","recipes","recipe","src_RecipeCard","renderDetails","key","id","SearchForm","onChange","value","placeholder","onClick","RecipeCard","App","state","searchVal","selectedRecipes","selectedDetails","event","preventDefault","selected","_this","filter","includes","length","setState","target","recipeName","innerHTML","console","log","details","this","src_DetailView","src_Heading","src_DirectoryView","React","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c80e1673.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Heading = () => (\n    <div className='lobster-font'>\n        <h1><i className=\"fas fa-utensils\"></i>RecipeApp</h1>\n    </div>\n)\n\nconst DetailView = (props) => (\n    <div className='details'>\n        <div className='recipe-name'><h1>{props.detail.name.toUpperCase()}</h1></div>\n\n        <h3>INGREDIENTS</h3>\n        <h3>INSTRUCTIONS</h3>\n        <ul>\n            {props.detail.ingredients.map( ingredient => (\n                <li>{ingredient}</li> )        \n            )}\n        </ul>\n        <ul>\n            {props.detail.instructions.map( instruction => (\n                <li>{instruction}</li>\n            ))}\n        </ul>\n    </div>\n)\n\nconst DirectoryView = (props) => (\n    <div className='directory'>\n        <SearchForm \n            handleChange={props.handleChange}\n            searchValue={props.searchValue} \n            selectRecipes={props.selectRecipes}\n        />\n\n        {props.recipes.map( recipe => (\n            <RecipeCard \n                renderDetails={props.renderDetails} \n                name={recipe.name} \n                key={recipe.id}\n            />\n        ))}\n    </div>\n);\n\nconst SearchForm = (props) => (\n    <form>\n        <input \n            onChange={props.handleChange} \n            value={props.searchValue}\n            placeholder='Search Text Here'\n        />\n\n        <button onClick={props.selectRecipes}>SEARCH</button>\n    </form>\n);\n\nconst RecipeCard = (props) => (\n    <div onClick={props.renderDetails} className='recipeName'>{props.name.toUpperCase()}</div>\n);\n\n\nclass App extends React.Component {\n    state = {\n        recipes: [\n            {\n                id: 1,\n                name: 'turkey + stuff',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 2,\n                name: 'turkey + stuff',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 3,\n                name: 'turkey + stuff',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 4,\n                name: 'turkey + stuff',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 5,\n                name: 'turkey + stuff',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 6,\n                name: 'mac and cheese',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 7,\n                name: 'turkey + stuff',\n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 8,\n                name: 'tester',\n                ingredients: ['test', 'test', 'testtest', 'test', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            },\n            {\n                id: 9,\n                name: 'test + stuff',   \n                ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n                instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n            }\n\n        ],\n        searchVal: '',\n        selectedRecipes: [],\n        selectedDetails: null\n    }\n\n    selectRecipes = (event) => {\n        event.preventDefault();\n        let selected = this.state.recipes.filter( recipe => \n            recipe.name.toUpperCase().includes(this.state.searchVal.toUpperCase())\n        )\n        if(selected.length > 0) {\n            this.setState({selectedRecipes: selected, selectedDetails: selected[0]});\n        }\n\n    }\n\n    handleChange = (event) => {\n        event.preventDefault();\n        this.setState({searchVal: event.target.value});\n    }\n\n    renderDetails = (event) => {\n        event.preventDefault();\n        let recipeName = event.target.innerHTML;\n        console.log(recipeName); \n        let details = this.state.recipes.filter( recipe => \n            recipe.name.toUpperCase() === recipeName.toUpperCase()\n        )\n\n        if(details.length > 0) {\n            this.setState({selectedDetails: details[0]});\n        }\n    }\n\n    render() {\n        let details;\n\n        if (this.state.selectedDetails != null) \n            details = <DetailView detail={this.state.selectedDetails} />\n        else \n            details = null;\n            \n        return (\n            <div>\n                <Heading />\n                <DirectoryView \n                    renderDetails={this.renderDetails}\n                    recipes={this.state.selectedRecipes} \n                    handleChange={this.handleChange} \n                    searchValue={this.state.searchVal} \n                    selectRecipes={this.selectRecipes} />\n                {details}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}